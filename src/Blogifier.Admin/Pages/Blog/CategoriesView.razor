@layout BlogLayout
@page "/admin/blog/categories/"
@using Blogifier.Shared
@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IJSRuntime _jsruntime
@inject IToaster _toaster
@inject NavigationManager _navigation

<PageTitle Title="@_localizer["Categories"]" />

<div class="app-posts pr-0 pr-lg-5">

    <div class="list-toolbar">

        <label class="list-check form-check" data-toggle="tooltip" title="Select All">
            <input type="checkbox" @onchange="EventArgs => { CheckAll(EventArgs.Value); }" class="list-check-input form-check-input">
        </label>

        @*<a class="btn btn-blogifier me-3 -add" href="/admin/pages/editor">@_localizer["New Category"]</a>*@

        @if (Categories != null && Categories.Count > 0)
        {
            <button type="button" @onclick="(async ()=> await RunAction(GroupAction.Delete))" class="btn btn-link text-danger" title="@_localizer["delete"]">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                </svg>
            </button>
        }

        <button type="button" class="btn btn-link list-search-toggle ms-auto" data-bs-toggle="collapse" data-bs-target="#collapseSearch">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
            </svg>
        </button>

    </div>

    <div class="list-search collapse" id="collapseSearch">
        <input @bind="SearchTerm" @onkeyup="SearchKeyPress" class="list-search-input" type="search">
        <button @onclick="(async () => await SearchCategories())" class="list-search-button" type="button">
            @_localizer["search"]
        </button>
    </div>

    @if (Categories != null && Categories.Count > 0)
    {
        <ul class="list mb-5" aria-label="posts">
            <Virtualize Items="Categories" Context="category">
                <li class="list-item">
                    <label class="list-check form-check">
                        <input type="checkbox" @bind="category.Selected" class="list-check-input form-check-input">
                    </label>
                    <a class="list-title -link" href="" @onclick="async ()=> await ShowEdit(category.Id)" @onclick:preventDefault>
                        @category.Category
                    </a>
                    <span class="list-text -nowrap ms-auto">
                        @category.PostCount
                    </span>
                    <a class="list-btn" href="categories/@category.Category" target="_blank" data-toggle="tooltip" title="Link">
                        <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-link-45deg" viewBox="0 0 16 16">
                            <path d="M4.715 6.542L3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.001 1.001 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z" />
                            <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 0 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 0 0-4.243-4.243L6.586 4.672z" />
                        </svg>
                    </a>
                </li>
            </Virtualize>
        </ul>
    }
    else
    {
        <div class="list-notfound -crazy">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-emoji-smile-upside-down" viewBox="0 0 16 16">
                <path d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zm0-1a8 8 0 1 1 0 16A8 8 0 0 1 8 0z" />
                <path d="M4.285 6.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 4.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 3.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zM7 9.5C7 8.672 6.552 8 6 8s-1 .672-1 1.5.448 1.5 1 1.5 1-.672 1-1.5zm4 0c0-.828-.448-1.5-1-1.5s-1 .672-1 1.5.448 1.5 1 1.5 1-.672 1-1.5z" />
            </svg>
            <p>@_localizer["This list is empty"]</p>
        </div>
    }

    <!-- New or Edit -->
    @if(IsEdit && CurrentCategory != null)
    {
    <div>
        <h1 class="section-title">@_localizer["Edit Category"]</h1>
        <EditForm model="@CurrentCategory" OnValidSubmit="SaveEdit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="section-content -half">
                <div class="form-item">
                    <label class="form-label">@_localizer["title"]</label>
                    <input type="text" class="form-control" name="title" @bind="CurrentCategory.Content" />
                </div>
                <div class="form-item">
                    <label class="form-label">@_localizer["description"]</label>
                    <textarea class="form-control" cols="30" rows="5" name="description" @bind="CurrentCategory.Description"></textarea>
                </div>
                <div class="form-item">
                    <button type="submit" class="btn btn-blogifier px-5 me-3">@_localizer["save"]</button>
                    <button type="button" class="btn btn-default px-4" @onclick="CancelEdit">@_localizer["cancel"]</button>
                </div>
            </div>
        </EditForm>
    </div>
    }
    <!--/ -->

</div>
<ToasterComponent @ref="Toaster" />

@code {
   protected ToasterComponent Toaster;
   protected List<CategoryItem> Categories { get; set; }
   protected Category CurrentCategory { get; set; }
   protected string SearchTerm { get; set; }
   protected bool IsEdit = false;

   protected override async Task OnInitializedAsync()
   {
       await Load();
   }

   protected async Task Load()
   {
       Categories = await _http.GetFromJsonAsync<List<CategoryItem>>($"api/category");
   }

   protected async Task ShowEdit(int categoryId)
   {
       CurrentCategory = await _http.GetFromJsonAsync<Category>($"api/category/byId/{categoryId}");
       IsEdit = true;
   }

   protected void CancelEdit()
   {
       CurrentCategory = null;
       IsEdit = false;
   }

   protected async Task SaveEdit()
   {
       Toaster.Toast(await _http.PutAsJsonAsync<Category>("api/category", CurrentCategory));
       CurrentCategory = null;
       IsEdit = false;
       await Load();
   }

   public void CheckAll(object checkValue)
   {
       bool isChecked = (bool)checkValue;
       Categories.ForEach(p => p.Selected = isChecked);
       StateHasChanged();
   }

   public async Task RunAction(GroupAction action)
   {
       string confirm = _localizer["confirm-delete"];
       bool confirmed = false;

       if (action == GroupAction.Delete)
       {
           confirmed = await _jsruntime.InvokeAsync<bool>("confirm", confirm);
           if (!confirmed)
               return;
       }

       foreach (var category in Categories)
       {
           if (category.Selected)
           {
               await _http.DeleteAsync($"api/category/{category.Id}");
           }
       }
       await Load();
   }

   protected async Task SearchKeyPress(KeyboardEventArgs e)
   {
       if (e.Key == "Enter")
           await SearchCategories();
   }

   protected async Task SearchCategories()
   {
       if (string.IsNullOrEmpty(SearchTerm))
           SearchTerm = "*";

       Categories = await _http.GetFromJsonAsync<List<CategoryItem>>($"api/category/{SearchTerm}");
       SearchTerm = "";
   }

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
       if (firstRender)
       {
           await _jsruntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
       }
   }
}
